/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package GmailAttachmentFetcher

import com.google.api.client.auth.oauth2.Credential
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets
import com.google.api.client.googleapis.auth.oauth2.GoogleOAuthConstants
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse
import com.google.api.client.http.javanet.NetHttpTransport
import com.google.api.client.json.jackson2.JacksonFactory
import com.google.api.client.util.store.FileDataStoreFactory
import com.google.api.services.gmail.Gmail
import com.google.api.services.gmail.GmailScopes
import com.google.api.services.gmail.model.ListMessagesResponse
import com.google.api.services.gmail.model.Message
import java.io.File
import java.io.InputStreamReader

class App {
}

const val user = ""
const val filter = "filename:pdf subject:factuur OR factuurnummer "
//const val filter = "filename:pdf subject:(factuur OR bestelling OR betaling)"

fun main(args: Array<String>) {
    val inputStreamReader = InputStreamReader(App::class.java.getResourceAsStream("/client_secrets.json"))
    val jsonFactory = JacksonFactory.getDefaultInstance()
    val secrets = GoogleClientSecrets.load(jsonFactory, inputStreamReader)
    val httpTransport = NetHttpTransport()
    val flow: GoogleAuthorizationCodeFlow =
        GoogleAuthorizationCodeFlow.Builder(httpTransport, jsonFactory, secrets, listOf(GmailScopes.GMAIL_READONLY))
            .setCredentialDataStore(FileDataStoreFactory(File("datastore")).getDataStore("a"))
            .build()

    var credential: Credential? = flow.loadCredential(user)

    if (credential == null) {
        val browserUrl: String = flow.newAuthorizationUrl()
            .setRedirectUri(GoogleOAuthConstants.OOB_REDIRECT_URI).build()

        println(browserUrl)

        val authCode: String = readLine()!!

        val response: GoogleTokenResponse = flow.newTokenRequest(authCode)
            .setRedirectUri(GoogleOAuthConstants.OOB_REDIRECT_URI)
            .execute()


        credential = flow.createAndStoreCredential(response, user)
    }

    val gmail: Gmail = Gmail.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName("AttachmentFetcher").build()

    println("Fetching messages")
    var messages = mutableListOf<Message>()
    var token: String? = null
    do {
        val response = getPagedMessageList(gmail, token)
        if (response.nextPageToken != token) {
            token = response.nextPageToken
        }

        messages.addAll(response.messages)
    } while (token != null)

    println("Found ${messages.size} messages")
    println("Fetching message details")

    messages.map { getMessageDetail(gmail, it.id) }
        .downloadAttachments(gmail, File("output"))
}

fun getPagedMessageList(gmail: Gmail, page: String? = null): ListMessagesResponse {
    val request = gmail.users()
        .Messages()
        .list(user)
        .setQ(filter)

    page?.run { request.pageToken = this }
    return request.execute()
}

fun getMessageDetail(gmail: Gmail, messageId: String): Message {
    return gmail.users().Messages().get(user, messageId).execute()
}
